#include <stdio.h>
#include <string.h>
#include <ctype.h>
int modInverse(int A, int M)
{
    for (int X = 1; X < M; X++)
        if (((A % M) * (X % M)) % M == 1)
            return X;
}
int main()
{
    int key[2][2] = {{2, 1}, {3, 4}};
    int det, det_inv = 0;
    int key_inv[2][2];
    char txt[20];
    printf("Enter Elements in matrix\n");
    for (int i = 0; i < 2; i++)
    {
        for (int j = 0; j < 2; j++)
        {
            printf("Enter [%d] [%d] element : ", i, j);

            scanf("%d", &key[i][j]);
            key_inv[j][i] = key[i][j];
        }
    }
    // determinant of matrix
    det = (key[0][0] * key[1][1]) - (key[0][1] * key[1][0]);
    det_inv = modInverse(det, 26);
    if (det_inv == 0)
    {
        printf("There is no mudular inverse of %d", det);
        return 0;
    }
    // get adjoin of matrix hardcoded
    key_inv[0][0] = key[1][1];
    key_inv[1][1] = key[0][0];
    key_inv[0][1] = key[0][1] * -1;
    key_inv[1][0] = key[1][0] * -1;
    // modular inverse marrix
    for (int i = 0; i < 2; i++)
    {
        for (int j = 0; j < 2; j++)
        {
            key_inv[i][j] *= det_inv;
            key_inv[i][j] = key_inv[i][j] % 26;
            if (key_inv[i][j] < 0)
            {
                key_inv[i][j] = 26 + key_inv[i][j];
            }
        }
    }
    printf("\nDeterminant of matix is : %d\n", det);
    printf("Modular inverse matrix : \n");

    for (int i = 0; i < 2; i++)
    {
        for (int j = 0; j < 2; j++)
        {
            printf("%d\t", key_inv[i][j]);
        }
        printf("\n");
    }
    printf("\nEnter plain text : ");
    scanf("%s", &txt);
    for (int i = 0; i < strlen(txt); i++)
        txt[i] = toupper(txt[i]);
    int txt_len;
    if (strlen(txt) % 2 == 0)
        txt_len = strlen(txt) / 2;
    else
        txt_len = (strlen(txt) / 2) + 1;
    int decrypt[2][txt_len], encrypt[2][txt_len];
    for (int i = 0, k = 0; i < txt_len && k < strlen(txt); i++)
    {
        for (int j = 0; j < 2; j++)
        {
            decrypt[j][i] = txt[k] - 'A';
            k++;
        }
    }
    if (strlen(txt) % 2 != 0)
        decrypt[1][strlen(txt) / 2] = 'X';
    // Encryption
    for (int i = 0; i < 2; i++)
    {
        for (int j = 0; j < txt_len; j++)
        {
            encrypt[i][j] = 0;
            for (int k = 0; k < 2; k++)
            {
                encrypt[i][j] += key[i][k] * decrypt[k][j];
            }
        }
    }
    printf("\nEncrypted Matrix :\n");
    for (int i = 0; i < 2; i++)
    {
        for (int j = 0; j < txt_len; j++)
        {
            encrypt[i][j] = encrypt[i][j] % 26;
            printf("%d ", encrypt[i][j]);
        }
        printf("\n");
    }
    printf("Encrypted text : ");
    for (int j = 0; j < txt_len; j++)
    {
        printf("%c", encrypt[0][j] + 'a');
        printf("%c", encrypt[1][j] + 'a');
    }
    printf("\n");
    // Decryption
    for (int i = 0; i < 2; i++)
    {
        for (int j = 0; j < txt_len; j++)
        {
            decrypt[i][j] = 0;
            for (int k = 0; k < 2; k++)
            {
                decrypt[i][j] += key_inv[i][k] * encrypt[k][j];
            }
        }
    }
    printf("\nDecrypted Matrix :\n");
    for (int i = 0; i < 2; i++)
    {
        for (int j = 0; j < txt_len; j++)
        {

            decrypt[i][j] = decrypt[i][j] % 26;
            printf("%d ", decrypt[i][j]);
        }
        printf("\n");
    }
    printf("Decrypted text : ");
    for (int j = 0; j < txt_len; j++)
    {
        printf("%c", decrypt[0][j] + 'a');
        printf("%c", decrypt[1][j] + 'a');
    }
    printf("\n");
    return 0;
}
